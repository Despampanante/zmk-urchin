/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define COLEMAK_DH 0
#define QWERTY 1
#define NUM 2
#define SYM 3
#define NAV 4
#define BT 5

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};
/ {
        combos {
            compatible = "zmk,combos";

            combo_bt_layer {
                timeout-ms = <100>;
                key-positions = <9 29>;
                bindings = <&mo BT>;
            };
            combo_qwerty_layer {
                timeout-ms = <100>;
                key-positions = <0 20>;
                bindings = <&tog QWERTY>;
            };

            combo_esc {
                timeout-ms = <100>;
                key-positions = <10 19>;
                bindings = <&kp ESC>;
            };
    };

     keymap {
        compatible = "zmk,keymap";

        colemak_dh_layer {
            label = "COLDH";
            bindings = <
        &kp Q      &kp W      &kp F      &kp P         &kp B          &kp J      &kp L       &kp U        &kp Y     &kp SEMI
        &mt LCTRL A &mt LALT R &mt LSHIFT S &mt LGUI T &kp G          &kp M      &mt LGUI N &mt RSHIFT E &mt LALT I &mt LCTRL O
        &kp Z      &kp X      &kp C      &kp D         &kp V          &kp K      &kp H       &kp COMMA    &kp DOT   &kp FSLH
                                         &lt NUM TAB   &lt NAV SPACE  &lt SYM ENTER  &lt NUM BSPC
            >;
        };
        // Base alpha layer
       	qwerty_layer {
            label = "QWERTY";
		bindings = <
		&kp Q &kp W &kp E &kp R &kp T                         &kp Y &kp U  &kp I     &kp O   &kp P
		&mt LCTRL A &mt LALT S &mt LSHIFT D &mt LGUI F &kp G  &kp H &mt LGUI J  &mt RSHIFT K     &mt LALT L &mt LCTRL SEMI
		&kp Z &kp X &kp C &kp V &kp B                         &kp N &kp M  &kp COMMA &kp DOT &kp FSLH
                            &lt NUM TAB   &lt NAV SPACE       &lt SYM ENTER  &lt NUM BSPC
		>;
		};


        NUM {
            label = "NUM";
            bindings = <
            &trans     &trans     &trans     &trans     &trans       &kp FSLH   &kp N7     &kp N8     &kp N9   &kp MINUS
            &trans     &trans     &trans     &trans     &trans       &kp STAR   &kp N4     &kp N5     &kp N6   &kp PLUS
            &trans     &trans     &trans     &trans     &trans       &kp N0     &kp N1     &kp N2     &kp N3   &kp RET
                                             &trans     &trans       &kp DOT    &trans
            >;
        };

        SYM {
            label = "SYM";
            bindings = <
            &kp EXCL  &kp AT    &kp HASH  &kp DOLLAR &kp PRCNT           &trans     &trans     &trans     &trans    &trans
            &kp CARET &kp AMPS  &kp STAR  &kp LPAR   &kp RPAR            &trans     &trans     &trans     &trans    &trans
            &kp TILDE &kp GRAVE &kp BSLH  &kp PIPE   &kp UNDER           &trans     &trans     &trans     &trans    &trans
                                             &kp APOS    &kp DQT        &trans     &trans
            >;
        };

        NAV {
            label = "NAV";
            bindings = <
            &trans  &trans  &trans  &trans  &trans    &trans       &kp LBRC   &kp RBRC   &kp LPAR   &kp RPAR
            &trans  &trans  &trans  &trans  &trans    &kp LEFT     &kp DOWN   &kp UP   &kp RIGHT   &kp SEMI
            &trans  &trans  &trans  &trans  &trans    &trans       &kp LBKT   &kp RBKT   &kp LT     &kp GT
                             &trans    &trans         &trans     &trans
            >;
        };

        BT {
            label = "BT";
            bindings = <
    &bt BT_CLR  &bt BT_NXT  &bt BT_PRV  &trans  &trans    &trans                        &trans   &trans   &trans   &trans
    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans     &trans   &trans   &trans   &trans
    &trans  &trans  &trans  &trans  &trans    &trans                        &trans   &trans   &trans     &trans
                                        &trans    &trans       &trans     &trans
            >;
        };


    };
};
